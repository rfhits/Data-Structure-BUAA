# 【问题描述】
# 单调栈维护的是一种有序的顺序结构，栈顶元素始终是最小的，栈底元素始终最大。
# 将一个元素插入单调栈时，为了维护栈的单调性，需要在保证将该元素插入到栈顶后整个栈满足单调性的前提下弹出最少的元素。
# 即，每次输入新元素时，为了维护递增顺序，栈顶小于等于新元素的元素均要出栈。
# 给定一组输入序列，请模拟递增单调栈并输出最后保留的元素。

# 【输入形式】
# 一行数组，空格分隔

# 【输出形式】
# 从栈顶单调栈内元素，从小到大，空格分隔

# 【样例输入】
# 1 4 3 6 2

# 【样例输出】
# 2 6

# 【样例说明】
# 1 入栈，此时为 1
# 1 出栈，4 入栈，此时为 4
# 3 入栈，此时为 3 4
# 3 出栈，4 出栈，6 入栈，此时为 6
# 2 入栈，此时为 2 6


lst_str = input().split()
lst = [int(i) for i in lst_str]
stack = []
for i in lst:
    if len(stack) == 0:
        stack.append(i)
    else:
        for j in stack[:]:
            if j <= i:
                stack.remove(j)
        stack.append(i)
stack.reverse()
for i in stack:
    print(i, end=' ')
